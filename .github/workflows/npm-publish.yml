name: Publish NPM package

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      # - name: Setup pnpm
      #   run: npm install -g pnpm

      - name: Install dependencies
        run: npm install

      - name: Check the version
        id: check
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "Current version: $CURRENT_VERSION"

          # Get latest tag, default to v0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Remove 'v' prefix from tag
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest version: $LATEST_VERSION"

          # Compare versions
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "✅ Version changed from $LATEST_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "⏭️  Version unchanged ($CURRENT_VERSION) - skipping publish"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build
        if: steps.check.outputs.version_changed == 'true'
        run: npm run build

      - name: Setup NPM Auth
        if: steps.check.outputs.version_changed == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" >> ~/.npmrc
          npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check if version exists on NPM
        if: steps.check.outputs.version_changed == 'true'
        id: npm_check
        run: |
          PACKAGE_NAME=$(jq -r .name package.json)
          CURRENT_VERSION=$(jq -r .version package.json)

          # Check if this version already exists on NPM
          if npm view "$PACKAGE_NAME@$CURRENT_VERSION" version 2>/dev/null; then
            echo "❌ Version $CURRENT_VERSION already exists on NPM"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Version $CURRENT_VERSION does not exist on NPM - proceeding with publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish
        if: steps.check.outputs.version_changed == 'true' && steps.npm_check.outputs.should_publish == 'true'
        run: npm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Tag release
      #   if: steps.check.outputs.version_changed == 'true' && steps.npm_check.outputs.should_publish == 'true'
      #   run: |
      #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions[bot]"
      #     git tag -a "v${{ steps.check.outputs.new_version }}" -m "Release v${{ steps.check.outputs.new_version }}"
      #     git push origin "v${{ steps.check.outputs.new_version }}"

      - name: Skip publish summary
        if: steps.check.outputs.version_changed == 'false'
        run: |
          echo "## 🚫 Publish Skipped" >> $GITHUB_STEP_SUMMARY
          echo "Version has not changed - no publish needed" >> $GITHUB_STEP_SUMMARY

      - name: Already published summary
        if: steps.check.outputs.version_changed == 'true' && steps.npm_check.outputs.should_publish == 'false'
        run: |
          echo "## ⚠️  Publish Skipped" >> $GITHUB_STEP_SUMMARY
          echo "Version ${{ steps.check.outputs.new_version }} already exists on NPM" >> $GITHUB_STEP_SUMMARY

      - name: Success summary
        if: steps.check.outputs.version_changed == 'true' && steps.npm_check.outputs.should_publish == 'true'
        run: |
          echo "## ✅ Package Published" >> $GITHUB_STEP_SUMMARY
          echo "Successfully published version ${{ steps.check.outputs.new_version }} to NPM" >> $GITHUB_STEP_SUMMARY
